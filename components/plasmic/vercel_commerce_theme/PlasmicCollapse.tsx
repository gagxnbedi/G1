// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6UtUvTtmyc5qzrzJqnbLQ9
// Component: bL7a3-s1MxCv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6UtUvTtmyc5qzrzJqnbLQ9/projectcss
import sty from "./PlasmicCollapse.module.css"; // plasmic-import: bL7a3-s1MxCv/css

import ChevronIcon from "./icons/PlasmicIcon__Chevron"; // plasmic-import: Sb_nMQ_mMytW/icon

createPlasmicElementProxy;

export type PlasmicCollapse__VariantMembers = {
  isOpen: "isOpen";
};
export type PlasmicCollapse__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};
type VariantPropType = keyof PlasmicCollapse__VariantsArgs;
export const PlasmicCollapse__VariantProps = new Array<VariantPropType>(
  "isOpen"
);

export type PlasmicCollapse__ArgsType = {
  title?: React.ReactNode;
  content?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCollapse__ArgsType;
export const PlasmicCollapse__ArgProps = new Array<ArgPropType>(
  "title",
  "content"
);

export type PlasmicCollapse__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultCollapseProps {
  title?: React.ReactNode;
  content?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollapse__RenderFunc(props: {
  variants: PlasmicCollapse__VariantsArgs;
  args: PlasmicCollapse__ArgsType;
  overrides: PlasmicCollapse__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__bVvdL, {
          [sty.freeBoxisOpen__bVvdLctJ3R]: hasVariant(
            $state,
            "isOpen",
            "isOpen"
          )
        })}
      >
        <ChevronIcon
          className={classNames(projectcss.all, sty.svg__tIUp, {
            [sty.svgisOpen__tIUPctJ3R]: hasVariant($state, "isOpen", "isOpen")
          })}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox___1PnoV)}>
          {renderPlasmicSlot({
            defaultContents: "Title",
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__bIiMl, {
          [sty.freeBoxisOpen__bIiMlctJ3R]: hasVariant(
            $state,
            "isOpen",
            "isOpen"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__f80Mj, {
            [sty.freeBoxisOpen__f80MJctJ3R]: hasVariant(
              $state,
              "isOpen",
              "isOpen"
            )
          })}
        >
          <ChevronIcon
            className={classNames(projectcss.all, sty.svg__b7Q, {
              [sty.svgisOpen__b7QctJ3R]: hasVariant($state, "isOpen", "isOpen")
            })}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__mp5QV)}>
          {renderPlasmicSlot({
            defaultContents: "Content",
            value: args.content,
            className: classNames(sty.slotTargetContent, {
              [sty.slotTargetContentisOpen]: hasVariant(
                $state,
                "isOpen",
                "isOpen"
              )
            })
          })}
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollapse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollapse__VariantsArgs;
    args?: PlasmicCollapse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollapse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollapse__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCollapse__ArgProps,
          internalVariantPropNames: PlasmicCollapse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollapse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollapse";
  } else {
    func.displayName = `PlasmicCollapse.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapse = Object.assign(
  // Top-level PlasmicCollapse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCollapse
    internalVariantProps: PlasmicCollapse__VariantProps,
    internalArgProps: PlasmicCollapse__ArgProps
  }
);

export default PlasmicCollapse;
/* prettier-ignore-end */
