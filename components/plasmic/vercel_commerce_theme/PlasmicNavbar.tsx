// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6UtUvTtmyc5qzrzJqnbLQ9
// Component: uxTyr3KlIWAw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CategoryLink } from "@plasmicpkgs/commerce";
import NavItem from "../../NavItem"; // plasmic-import: Ul9ijvA8po-b/component
import { CategoryCollection } from "@plasmicpkgs/commerce";
import { CategoryField } from "@plasmicpkgs/commerce";
import TextInput from "../../TextInput"; // plasmic-import: uSB6o4sitQxH/component
import Cart from "../../Cart"; // plasmic-import: GN63R7AoxEwP/component

import { useScreenVariants as useScreenVariantsxbhWJpWz8Bqa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: XbhWJpWZ8BQA/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6UtUvTtmyc5qzrzJqnbLQ9/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: uxTyr3KlIWAw/css

import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: d2DjTpu2osKL/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: ol2QMV1oT4Zn/icon
import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: E-FVGWUJa_93/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {
  query?: string;
};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>("query");

export type PlasmicNavbar__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  categoryCollection?: Flex__<typeof CategoryCollection>;
  categoryField?: Flex__<typeof CategoryField>;
  textInput?: Flex__<typeof TextInput>;
  cart?: Flex__<typeof Cart>;
};

export interface DefaultNavbarProps {
  query?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["query"]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxbhWJpWz8Bqa()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xiKBk)}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={`/`}
          platform={"nextjs"}
        >
          <LogoIcon
            className={classNames(projectcss.all, sty.svg__znLOh)}
            role={"img"}
          />
        </PlasmicLink__>
        <CategoryLink
          className={classNames("__wab_instance", sty.categoryLink__g29Y4)}
          linkDest={"/search"}
        >
          <NavItem className={classNames("__wab_instance", sty.navItem__ogR7Q)}>
            {"All"}
          </NavItem>
        </CategoryLink>
        {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
          <CategoryCollection
            data-plasmic-name={"categoryCollection"}
            data-plasmic-override={overrides.categoryCollection}
            className={classNames("__wab_instance", sty.categoryCollection)}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sSi3K
                    )}
                  >
                    {"No collection found!"}
                  </div>
                )}
              </DataCtxReader__>
            }
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b5E6L
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noLayout={true}
          >
            <DataCtxReader__>
              {$ctx => (
                <NavItem
                  className={classNames("__wab_instance", sty.navItem__oEaOo)}
                >
                  <CategoryLink
                    className={classNames(
                      "__wab_instance",
                      sty.categoryLink__psSBe
                    )}
                    linkDest={"/search"}
                  >
                    <CategoryField
                      data-plasmic-name={"categoryField"}
                      data-plasmic-override={overrides.categoryField}
                      className={classNames(
                        "__wab_instance",
                        sty.categoryField
                      )}
                      field={"name"}
                    />
                  </CategoryLink>
                </NavItem>
              )}
            </DataCtxReader__>
          </CategoryCollection>
        ) : null}
      </Stack__>
      <TextInput
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        className={classNames("__wab_instance", sty.textInput)}
        color={"dark"}
        endIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__hiIFx)}
            role={"img"}
          />
        }
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["textInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        showEndIcon={true}
        value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___98Xuv)}
      >
        <Cart
          data-plasmic-name={"cart"}
          data-plasmic-override={overrides.cart}
          className={classNames("__wab_instance", sty.cart)}
        />

        <WishlistIcon
          className={classNames(projectcss.all, sty.svg__dTrqO)}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__pEtZe)} />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "categoryCollection",
    "categoryField",
    "textInput",
    "cart"
  ],
  link: ["link"],
  categoryCollection: ["categoryCollection", "categoryField"],
  categoryField: ["categoryField"],
  textInput: ["textInput"],
  cart: ["cart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  categoryCollection: typeof CategoryCollection;
  categoryField: typeof CategoryField;
  textInput: typeof TextInput;
  cart: typeof Cart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    textInput: makeNodeComponent("textInput"),
    cart: makeNodeComponent("cart"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
